
This file describes coding conventions for PLASTK, to which all PLASTK
developers should try to adhere (even Jeff).


CODE FORMATTING AND ORGANIZATION

- Use 4-space indentation.

- Naming should more-or-less follow the conventions of the Python
  standard library: 
  - Module names should be one-word, all lowercase, and preferably
    short.  Short module names encourage use of qualified names,
    instead of "from module import *", which is a good thing.
  - Class names should be in InitialCaps format, with no underscores.
  - Functions, methods, and attributes should be
    lower_case_with_underscores.

- Each modules should include a documentation string as the FIRST
  THING in the file, before any imports.  It should contain a
  one-liner description of the module, followed by a longer
  description, preferably with usage guidelines and examples.

- All modules and other text files should contain a CVS Id-string, as
  in the top of this file.  In Python modules it should be the last
  thing in the module doc string.

- Modules should include groups of related classes and functions.  The
  one-class-per file model of Java/C++ is cumbersome in Python. 


UNIT TESTS

- Run the unit tests before committing or submitting code changes:

To run all tests:
>>> plastk.test()  

To run a specific test:

>>> import unittest
>>> from plastk.tests.foo import suite
>>> unittest.TextTestRunner().run(suite)

- Write unit tests for new modules.  Test should run fairly quickly, and test
  that the algorithms are generally behaving sanely and correctly.
  Since many algorithms are randomized and/or approximate, it will be
  difficult to write tests for every conceivable failure.  Unit test
  modules are in the subdirectory plastk/tests

- If you find a bug in an algorithm or interface that is not caught by
  the tests, please write a test case that tests for the correct
  behavior and shows the bug.


BASE HYGIENE

The subpackge plastk.base includes the base class definitions used by the rest of plastk.  Code defined in plastk.base should not import any plastk entities from outside plastk.base. 


PARAMETERS

- Most object classes should inherit from plastk.base.params.ParameterizedObject.
  This particularly applies to classes that will be explicitly used in
  experiments, e.g. agents, environments, function approximators,
  vector quantizers, etc.  ParameterizedObject provides lots of features for
  instrumenting and debugging experiments.  The only times that
  classes shouldn't inherit from ParameterizedObject is when they're auxilliary
  classes, only intended to be used privately within a module, or when
  performance dictates that the class must be very lightweight.  In
  the latter case, the class should probably have a wrapper that's
  derived from ParameterizedObject to provide an interface.

  Classes that are derived from ParameterizedObject MUST accept an arbitrary
  set of keyword arguments and MUST call the superclass constructor
  (__init__) and pass these arguments up.  If the class has no
  constructor of its own, this will happen automatically.  Otherwise,
  the classes should look basically like this:

  class MyClass(ParameterizedObject):
     def __init__(self,**args):
         super(MyClass,self).__init__(**args)
         <... do some stuff here ...>

  The ParameterizedObject constructor will take care of things like filling in
  local parameter values (see below) and assigning a default name to
  the object (if none is provided).
     
- Use Parameter descriptors (see plastk.base.params) to define Parameters.
  As a rule of thumb, any instance attribute whose value be defined as
  an argument of the class's __init__ method should probably be a
  parameter.  Parameters are intended for settings that will influence
  the way in which an algorithm operates.  Using Parameter descriptors
  provides several advantages over just using ordinary attributes:
  - Default values can be set easily (e.g. TDAgent.alpha = 0.2)
  - Defaults can be overridden in instances easily (e.g agent =
    TDAgent(alpha = 0.001).
  - Parameters can have type and bounds checking, and the parameter
    system automatically checks for typos (e.g. TDAgent.aphla = 0.2
    will generate a warning)
  For more details check the module docs for plastk.params.


$Id: CONVENTIONS.txt 229 2008-03-03 04:38:00Z jprovost $
